1. Mi az a TypeScript, és hogyan különgbözik a JavaScript-től?
A TypeScript egy programozási nyelv, amit a Microsoft fejlesztett. A TypeScript egy JavaScript feletti kibővített nyelv, ami azt jelenti, hogy minden érvényes JavaScript kód érvényes TypeScript kód is. A TypeScript és a JavaScript közötti fő különbség a TypeScript típusossága és a fordítási időben történő típusellenőrzés terén rejlik. A TypeScript bevezeti a statikus típusozást, ami lehetővé teszi a fejlesztők számára, hogy megadjanak típusokat változókhoz, függvényparaméterekhez és visszatérési értékekhez. Ez a funkció jobb eszköztámogatást, javított olvashatóságot biztosít és segít a fejlesztési folyamat korai szakaszában történő hibák elkapásában.

A JavaScript egy dinamikus szkriptnyelv, amelyet széles körben használnak webfejlesztéshez. A JavaScript értelmezett, nem fordított nyelv, és dinamikus típusolási megközelítést követ. Ez azt jelenti, hogy a JavaScriptben a változók értékei bármilyen típusúak lehetnek típusellenőrzés nélkül, ami futásidejű hibákhoz vezethet. A TypeScript ezeket a problémákat kezeli azáltal, hogy opcionális statikus típusozást kínál, valamint olyan fejlett funkciókat, mint az interfészek, az enumerációk és a generikusok. Ezek a fejlesztések nem változtatják meg a kód futásidejű viselkedését, mivel a TypeScript általános JavaScriptre fordítódik le, így kompatibilis bármely böngészővel vagy JavaScript környezettel.

2. Elmagyaráznád a TypeScript alapvető típusait?
A TypeScript alapvető típusai közé tartozik a string, number, boolean, array, tuple, enum, any, void, null és undefined típusok. Minden típusnak specifikus célja van. A stringek szöveges adatokat képviselnek, míg a számok egész és lebegőpontos értékeket fednek le. A booleanok igaz vagy hamis értékeket képviselnek. Az arrayek több ugyanolyan típusú értéket tartalmaznak, a tuple-ok pedig egy fix típusú és méretű tömböt tesznek lehetővé. Az enumok lehetővé teszik egy adott nevű konstansok halmazának meghatározását, javítva a kód olvashatóságát. Az any típus egy összefoglaló kategória, amely lehetővé teszi bármilyen típusú érték használatát. A void az egy típus hiányát jelöli, általában olyan függvényeknél használatos, amelyek nem adnak vissza értéket. A null és az undefined típusok érték hiányát, illetve az inicializálatlan változót jelentik.

A TypeScript típusrendszere segít a kód megbízhatóságának és előrejelzhetőségének biztosításában. A nyelv fordítási időben típusellenőrzést végez, megakadályozva a JavaScriptben gyakran előforduló hibákat. A fejlesztők ezeket a típusokat használják annak biztosítására, hogy a függvénybevitel és -kimenetek következetesek legyenek, javítva a kód karbantarthatóságát és olvashatóságát. Az alapvető típusok által nyújtott rugalmasság lehetővé teszi a TypeScript számára a különböző alkalmazási követelmények hatékony kezelését, ami erőteljes eszközzé teszi a webfejlesztésben.

3. Hogyan deklarálhatunk változót TypeScriptben?
Deklaráljunk egy változót a let vagy const kulcsszó használatával, amelyet követ a változó neve. Például a let age: number; deklarál egy age nevű változót, amely number típusú. A típusjegyzék opcionális, de javasolt a jobb típusellenőrzés és kódolás átláthatósága érdekében. A TypeScript támogatja a JavaScriptből származó var kulcsszót is, de általában nem ajánlott használata a funkció-létrehozási szokások miatt.

A TypeScript javítja a JavaScriptet a típusok hozzáadásával, és ezek a típusok biztosítják a megbízhatóbb kódot. A változóknak konkrét típusaik vannak, mint például a number, string, boolean vagy bonyolultabb típusok, például tömbök és objektumok. Értéket rendelünk a deklarált változónak az értékadó operátor = használatával, például age = 30;. A fordító típusellenőrzést végez, és hibát jelent, ha az értékadott érték nem egyezik meg a deklarált típussal. Ez a funkció biztonságot és előrejelezhetőséget nyújt nagy kódbázisokban.

4. Mi az interfész a TypeScriptben és hogyan használjuk?
Az interfész a TypeScriptben egy struktúra, amely meghatározza egy objektum alakját. Az interfész meghatározza az elvárt tulajdonságneveket és típusokat, biztosítva, hogy az objektumok megfeleljenek egy adott formátumnak. Az interfészeket a TypeScriptben az objektumok struktúrájának következetességének előírására használják. Ez a megközelítés különösen előnyös nagyméretű alkalmazásokban, ahol a kód különböző részeinek egységességének fenntartása kritikus fontosságú.

Az interfészek tulajdonságokat és típusokat deklarálnak, de nem valósítják meg azokat. Az objektumoknak tartalmazniuk kell az interfész által meghatározott összes tulajdonságot a megfelelő típusokkal, amikor az interfészt megvalósítják. Ez a módszer egyértelmű szerződést nyújt arról, hogy egy objektumnak hogyan kell kinéznie. Az interfészek támogatják más interfészek kiterjesztését is, lehetővé téve összetettebb struktúrák és a kód újrafelhasználhatóságát. Ez a funkció elengedhetetlen a TypeScriptben épített moduláris és karbantartható alkalmazásokhoz.

5. Hogyan támogatja a TypeScript az objektumorientált programozást?
A TypeScript támogatja az objektumorientált programozást osztályok, interfészek és modulok létrehozásával. Az osztályok a fő építőkövei az objektumorientált programozásnak a TypeScriptben. Az osztályok összegzik az objektumok adatait és biztosítanak egy tervrajzot a konkrét típusú objektumok létrehozásához. A TypeScript fokozza az objektumorientált programozást az öröklés támogatásával, ahol egy osztály egy másikat kiterjeszti, öröklődve annak tulajdonságait és metódusait. Ez a funkció elősegíti a kód újrafelhasználhatóságát és egy hierarchikus szerkezetet a kódolásban.

A TypeScript támogatja az osztálytagok hozzáférési módosítóit, például a public, private és protected módosítókat, amelyek szabályozzák a tagok elérhetőségét. Ez a vezérlés a tagok elérésének biztosítja az osztályokba való beágyazottságot, ami az objektumorientált programozás egyik alapelve. A TypeScript kínál interfészek fogalmát is, amelyek meghatározzák az osztályoknak követendő struktúrát. Ez egy bizonyos szintű absztrakció és szerződésalapú programozás megvalósítását teszi lehetővé. Valósítsa meg a polimorfizmust a TypeScriptben olyan módszerekkel, amelyek ugyanolyan nevet, de különböző aláírást használnak a származtatott osztályokban. Ez lehetővé teszi az objektumok dinamikusabb és rugalmasabb módon történő interakcióját, amely az objektumorientált tervezés másik alapvető fogalma.

6. Mik a TypeScript osztályok és hogyan működnek?
A TypeScript osztályok sablonok az objektumok létrehozásához, az adatok és függvények becsomagolásához. A TypeScript osztályok működése úgy történik, hogy lehetővé teszik a fejlesztők számára az objektumok tervrajzának meghatározását, egyértelmű struktúrát biztosítva. Az osztályok a TypeScriptben támogatják az öröklődést, lehetővé téve az új osztályoknak az ősosztály tulajdonságainak és metódusainak felvételét. Ez a funkció elősegíti a kód újrafelhasználhatóságát és egy hierarchikus objektumorientált struktúrát.

Egy osztálynak konstruktorai, tulajdonságai és metódusai vannak a TypeScriptben. A konstruktor módszer inicializálja az osztály új példányait. A tulajdonságok meghatározzák az osztály jellemzőit, a metódusok pedig az osztály viselkedését írják le. A TypeScript osztályokat hozzáférési módosítókkal, például public, private és protected is támogatják, amelyek szabályozzák az osztálytagok láthatóságát. A TypeScript osztályok támogatják az interfészeket is, amelyek biztosítják, hogy bizonyos osztályok megfeleljenek egy meghatározott szerződésnek, amely egységes szerkezetet biztosít az alkalmazás különböző részein.

7. Le tudnád írni a modulok koncepcióját a TypeScriptben?
A modulok koncepciója a TypeScriptben arra vonatkozik, hogy hogyan lehet a kódot diszkrét funkcionalitási egységekre szervezni. A TypeScriptben egy modul egy fájlt tartalmazó kódot jelent, és minden fájlt külön modulként kezel. Ez a rendszer elősegíti a kód karbantarthatóságát és újrafelhasználhatóságát a funkcionalitás kapszulázásával. A modulok a TypeScriptben függvényeket, változókat, osztályokat és interfészeket exportálnak vagy importálnak, ami alapvető elemek a nyelvben. Ezek az exportok és importok lehetővé teszik a kód megosztását az alkalmazás különböző részei között.

A TypeScript támogatja mind a belső, mind az külső modulokat. A belső modulokat, korábban namespacekként ismertek, a kód szervezésére használják egyetlen projektben belül. A külső modulok viszont az ECMAScript 2015 modulrendszerével állnak összhangban, és akkor hasznosak, amikor más JavaScript könyvtárakkal való integrációra vagy egy projekt több fájlra való bontására van szükség. A fejlesztők a modulokat a TypeScriptben a változók és függvények hatókörének vezérlésére használják, biztosítva, hogy a globális névtér szennyeződése minimális legyen. A TypeScript továbbá javítja a kód olvashatóságát és hibakeresését a kódot modulokba történő becsomagolással.

A namespace-k egy logikai csoportosítást jelentenek a kódbázisban, és segítenek elkerülni a névütközéseket.
Először egy névteret definiálunk, majd ezen belül tároljuk a típusokat, függvényeket stb.
Gyakran használják akkor, amikor különböző összetett típusokat vagy függvényeket akarunk csoportosítani.Mindkét eszköz hasznos a nagyobb TypeScript projektjelekben való szervezéshez és a kód tisztábbá tételéhez. A modulok erősebb típusellenőrzést és jobb skálázhatóságot biztosítanak, míg a namespace-k inkább a logikai csoportosítást és a névütközések elkerülését segítik.

8. Hogyan valósítható meg az öröklődés a TypeScriptben?
Az öröklődés megvalósítása a extends kulcsszó használatával történik a TypeScriptben. Az osztályok örökölnek más osztályokból, lehetővé téve azok tulajdonságainak és metódusainak felvételét az ősosztályból. Ez a funkció az objektumorientált programozás paradigmáját követi. Hozzon létre egy új osztályt, és használja a extends kulcsszót az osztály neve után, hogy öröklődjön egy osztályból. A leszármazott osztály így hozzáfér az ősosztály tulajdonságaihoz és metódusaihoz.

Az öröklődés lehetővé teszi a metódus felülírását, amikor a leszármazott osztály módosítja vagy kiterjeszti az örökölt metódusok funkcióit. Definiáljon metódusokat a leszármazott osztályban ugyanazzal a névvel, mint az alap osztályban, hogy ezt elérje. A super kulcsszó kulcsfontosságú szerepet játszik az öröklődésben, amelyet az ősosztályon belüli függvények hívására használnak. Használja a super kulcsszót a leszármazott osztály konstruktorában az alap osztály konstruktorának hívására. Ez az eljárás biztosítja, hogy az alap osztályt helyesen inicializálják. Az öröklődés használata a TypeScriptben javítja a kód újrafelhasználhatóságát és elősegíti egy tisztább, rendezettebb kódszerkezet kialakítását.

10. Mi a TypeScript dekorátor és mi a célja?
A TypeScript dekorátor egy speciális típusú deklaráció, amelyet egy osztálydeklarációhoz, metódushoz, hozzáférési metódushoz, tulajdonsághoz vagy paraméterhez csatolnak. A dekorátorok az @expression formáját használják, ahol az expression értékelése egy olyan függvényre kell, hogy vezessen, amelyet futásidőben hívnak meg azon információkkel, amelyek a dekorált deklarációról szólnak. A TypeScript dekorátor fő célja az osztály tulajdonságainak és metódusainak módosítása vagy annotálása. A dekorátorok lehetővé teszik mind annotációk, mind meta-programozási szintaxis hozzáadását az osztálydeklarációkhoz és tagjaihoz.

A dekorátorok különböző szerepeket látnak el, például egy metódus vagy tulajdonság viselkedésének módosítása vagy olyan metaadatok biztosítása, amelyek futásidőben használhatók. Hasznosak tisztább, olvashatóbb kód írására és sablonkód csökkentésére. A dekorátorok fokozzák az osztályok vagy osztálytagok funkcionalitását anélkül, hogy megváltoztatnák az osztály tényleges kódját. Ez a funkció összhangban áll a TypeScript filozófiájával, miszerint a JavaScript fejlesztést hatékonyabbá és robosztusabbá kell tenni. A dekorátorral ellátott deklarációk esetén feldolgozza az osztályt vagy osztálytagot, amelyhez csatlakozik a dekorátor, ezáltal kiterjeszti vagy megváltoztatja annak viselkedését a dekorátorfüggvényben meghatározott logika szerint.

A dekorátorok TypeScriptben egy olyan funkció, amely lehetővé teszi az osztályok, metódusok vagy tulajdonságok módosítását vagy kiegészítését futási időben. A dekorátorok egyfajta metaadatot adnak az osztályoknak és azok elemeinek, és ezáltal lehetővé teszik azok viselkedésének vagy tulajdonságainak változtatását.

A dekorátorokat az @ jelöléssel használjuk a TypeScript kódunkban, és lehetnek osztálydekorátorok, metódusdekorátorok, tulajdonságdekorátorok vagy paraméterdekorátorok.

 A dekorátorok lehetőséget adnak a kód kiegészítésére, kibővítésére vagy módosítására anélkül, hogy közvetlenül meg kellene változtatni az eredeti forráskódot.

11. Hogyan kezeli a TypeScript a null és az undefined értékeket?
A TypeScript különálló típusokként kezeli a null és az undefined értékeket, amelyek a hiányzó értéket és a hiányzó definíciót jelentik, egyaránt. A változókat explicit módon meghatározhatjuk arra, hogy nullt vagy undefinedot engedélyezzenek, a TypeScriptben unió típusok használatával. Például egy változó deklarálható úgy, hogy string | null | undefined, hogy elfogadjon egy stringet, nullt vagy undefinedet. A TypeScript szigorú null ellenőrzést alkalmaz, amikor a strictNullChecks jelző engedélyezve van a fordító beállításaiban. Ez a funkció biztosítja, hogy a meghatározott típusú változók ne fogadjanak el nullt vagy undefinedet, hacsak azokat nem egyértelműen definiálják a típusdeklarációban.

A TypeScript típusőrei arra szolgálnak, hogy futásidőben ellenőrizzék a null vagy undefined értékeket. Egy típusőr, mint például az if (változó !== null && változó !== undefined), biztosítja, hogy a változó sem null, sem undefined, mielőtt további műveleteket végeznének. Ez a gyakorlat elősegíti a kód biztonságát és segít megelőzni a futásidejű hibákat a null vagy undefined értékekkel kapcsolatban. A TypeScript típusinfernáló rendszere segít azonosítani a potenciális null vagy undefined hibákat a fejlesztés során, azonnali visszajelzést és iránymutatást nyújtva a robosztus hibakezeléshez.

Ha a strict null check be van kapcsolva a typescript konfigurációjában és egy változó típusa nem tartalmazza expliciten a null vagy undefined típusokat, akkor azok nem engedélyezettek, és a TypeScript hibaüzenetet generál, ha null vagy undefined értéket próbálunk hozzárendelni.

12. Mik azok a generikus típusok TypeScriptben, és miért hasznosak?
A generikus típusok TypeScriptben olyan funkciókat tesznek lehetővé, amelyek lehetővé teszik komponensek létrehozását, amelyek többféle típussal működnek egyetlen típus helyett. Ez a koncepció javítja a kód rugalmasságát és újrafelhasználhatóságát, mivel lehetővé teszi funkciók, interfészek és osztályok működését különböző adattípusokkal, miközben biztosítja a típusbiztonságot. A generikus típusok használata biztosítja, hogy a kód konzisztens maradjon a viselkedését tekintve különböző típusok esetén.

Hasznosak, mert lehetővé teszik fejlesztők számára, hogy absztraktabb és karbantarthatóbb kódot írjanak. Egy fejlesztő ír egy olyan függvényt vagy osztályt, amely bármilyen típussal működik generikus típusok segítségével, biztosítva, hogy a típusbiztonság fenntartásra kerüljön. A fordító ellenőrzi a típusokat fordítási időben, megakadályozva a futásidejű hibákat, és biztosítva, hogy a kód várt módon működjön különböző adattípusokkal. Ez a megközelítés csökkenti a felesleges kód szükségességét, így optimalizálva a fejlesztési folyamatot és javítva a kód minőségét.

A generikus típusok (vagy egyszerűen generikumok) a TypeScript egyik alapvető funkciója, amely lehetővé teszi a típusbiztonságos általánosítást a kódon belül. A generikus típusok segítségével olyan típusokat és függvényeket hozhatunk létre, amelyek paraméterként vesznek át egy vagy több típust, és ezeket a típusokat később használják a kódban.

A generikus típusok előnyei közé tartozik a kód újrafelhasználhatósága és a típusbiztonság megőrzése. Hasznosak lehetnek olyan helyzetekben, amikor egy függvény vagy osztály olyan adatokkal dolgozik, amelyek típusa csak futási időben ismert, vagy olyan helyzetekben, amikor egy függvény vagy osztály különböző típusokkal működik ugyanazon a kódban.

13. Hogyan lehet létrehozni és használni az enumokat TypeScriptben?
Definiáld őket az enum kulcsszó használatával, amelyet egy sor nevesített konstans követ a TypeScriptben. Az enumok lehetővé teszik egy sor nevesített konstans szervezését egyetlen név alatt. Ez a megközelítés javítja a kód olvashatóságát és karbantarthatóságát. Használj enumokat nevesített konstansok meghatározására, amelyeknek numerikus vagy string értéke van.

Az enumok használata TypeScriptben magában foglalja egy enum típus deklarálását, majd annak felhasználását változókban vagy függvényparaméterekben. Az enum deklarációja után az enum tagjait változókhoz rendeljük összehasonlítási vagy hozzárendelési célokra. Az enumok lehetővé teszik a kapcsolódó konstansok kezelését szervezett módon, biztosítva, hogy az értékek a meghatározott enum tagok halmazába essenek. A TypeScript biztosítja, hogy a változókhoz rendelt értékek a meghatározott enum tagok halmazából származnak, ha enumokat használsz, ezáltal csökkentve a hibás értékek miatti hibák valószínűségét.

14. Hogyan írná le az acces modyfier-eket TypeScript-ben?

Az elérési módosítók TypeScript-ben olyan kulcsszavak, amelyek beállítják a tulajdonságok és metódusok hozzáférhetőségét egy osztályban. TypeScript három fő elérési módosítót tartalmaz: public, private és protected. A public módosító lehetővé teszi, hogy a tagok bárhonnan elérhetők legyenek; ez az alapértelmezett beállítás, ha nincs elérési módosító megadva. A private tagok csak az osztályon belül érhetők el, biztosítva az osztály belső részeinek kapszulázását. A protected tagok hasonlóak a private-okhoz, de az az előnyük, hogy elérhetők a leszármaztatott osztályokban is, támogatva ezzel egy kontrolláltabb öröklődési formát.

TypeScript elérési módosítói növelik az osztályalapú programozást, lehetővé téve a tagok láthatóságának szabályozását. Ezeknek a módosítóknak a használata elősegíti a robosztus, karbantartható kódokat a kapszulázás érvényesítése és az objektum integritásának védelme révén. Az elérési módosítók nélkülözhetetlenek a fejlesztők számára annak érdekében, hogy hatékonyan tudják megvalósítani az objektumorientált programozás elveit TypeScript-ben.

15. Mi az a névtér (namespace) TypeScript-ben és mire jó?

A névtér (namespace) TypeScript-ben egy módszer arra, hogy a kódot logikai csoportokba rendezze és nevek ütközéseit kerülje el nagyobb alkalmazásokban. A névtér funkcionális egységként működik a függvényekhez, interfészekhez, osztályokhoz és változókhoz, strukturált szerkezetet adva a kódbázisnak. Ez a szervezési módszer tisztább globális hatókört biztosít, mivel becsomagolja ezeket a tagokat egy meghatározott kontextusba, megakadályozva a globális névtér szennyeződését.

A névterek használata egyszerűsíti a nagy kódbázisok karbantartását azzal, hogy a kapcsolódó funkcionalitásokat csoportosítja. Növeli a kód olvashatóságát és újrafelhasználhatóságát, különösen olyan projektek esetében, amelyek több fejlesztővel dolgoznak. A fejlesztők egy névtér tagjaihoz a névtér nevét használják előtagként, ami egyszerűsíti a hivatkozást és minimalizálja a névütközések kockázatát. A névterek támogatják a kód újrafelhasználhatóságát és skálázhatóságát, ami nélkülözhetetlen a nagyméretű alkalmazások fejlesztéséhez.

16. Hogyan jelöli meg a függvény típusokat TypeScript-ben?

A függvény típusok jelöléséhez definiálni kell a függvény bemeneti paramétereinek típusait és a visszatérési típust a függvény típusának megjelöléséhez TypeScript-ben. TypeScript pontos típusjelöléseket tesz lehetővé a függvényekre. Deklaráljuk a paraméterek típusait zárójelekben a függvény neve után, és a visszatérési típust kettősponttal a paraméterlista után.

Például egy függvény, amely két számot vesz be és egy számot ad vissza, így jelölnénk: (a: number, b: number): number. Ez biztosítja, hogy a TypeScript a fordítási időben ellenőrizze a típusokat, ami kevesebb futási hibához vezet. Ha a függvény nem ad vissza értéket, a void típust használjuk a visszatérési típusnak. Definiáljuk a függvény típusait, amelyeket változók típusaként használnak, ez biztosítja a függvény aláírásainak következetes implementációját a kódbázisban.

17. Mi az a típuskijelentés (type assertion) TypeScript-ben és hogyan használják?

A típuskijelentés (type assertion) TypeScript-ben egy módszer arra, hogy egy változó típusát explicit módon meghatározzuk. A típuskijelentés arra szolgál, hogy a fordítónak jelezzük az entitás adattípusát, anélkül, hogy adattípus-átalakítást végeznénk. Ez a technika hasznos, amikor a fejlesztő jobban ismeri a változó típusát, mint amennyit a TypeScript önmagától követelt volna. Például amikor DOM elemekkel dolgozunk, a típuskijelentés lehetővé teszi egy specifikusabb típus meghatározását a általános HTMLElement típus helyett.

Két szintaktikai forma létezik a típuskijelentésre TypeScript-ben: az "angle-bracket" szintaxis és az as kulcsszó szintaxis. Az "angle-bracket" szintaxisban a típus szögletes zárójelben van, és a változó előtt helyezkedik el. Az as kulcsszó szintaxis a változó után áll, és az as kulcsszót követi a típus. Használjuk az "angle-bracket" szintaxist JSX esetén, mivel az as kulcsszó preferált más helyzetekben. A típuskijelentés nem változtatja meg a kód futási viselkedését, de tájékoztatja a TypeScript fordítót a várható típusról, így jobb típusellenőrzést és automatikus kiegészítést tesz lehetővé a fejlesztői környezetekben.

pl
angle bracket
let value: any = "This is a string";
let strLength: number = (<string>value).length;
console.log(strLength); // Output: 16

as
let value: any = "This is a string";
let strLength: number = (value as string).length;
console.log(strLength); // Output: 16

18. Hogyan kapcsolódnak egymáshoz a TypeScript és az ES6?

A TypeScript és az ES6 kapcsolatban állnak úgy, hogy a TypeScript tartalmazza az összes ES6 funkciót. A TypeScript integrálja az összes ES6 funkciót, és további funkciókat biztosít, mint például a statikus típusozás. Ez azt jelenti, hogy bármely érvényes ES6 kód szintén érvényes TypeScript kód, ami lehetővé teszi az ES6 funkciók zökkenőmentes használatát egy TypeScript környezetben. A TypeScript kiterjeszti az ES6 képességeit, hozzáadva olyan funkciókat, mint az interfészek, az enumok és a dekorátorok, amelyek nem szerepelnek az ES6-ban.

A fejlesztők a TypeScript-et a statikus típusozás és az objektumorientált programozási képességek miatt használják, amelyek javítják a nagy kódbázisok robosztusságát és karbantarthatóságát. JavaScript-be fordítódik, ami biztosítja a kompatibilitást bármilyen JavaScript környezettel. Ez a fordítási folyamat lefordítja a TypeScript további funkcióit az egyenértékű JavaScript kóddá, amely kompatibilis az ES6 szabványokkal. Alapvetően a TypeScript kiterjesztett, gazdagabb környezetet kínál, amely az ES6 által lefektetett alapokra épít.

19. Mi az unió típus (union types) TypeScript-ben?

Az unió típusok TypeScript-ben lehetővé teszik, hogy egy változó értéke több típusé legyen. Az unió típusok növelik a változó használatának rugalmasságát, mivel engedélyezik, hogy különböző típusok legyenek hozzárendelve egyetlen változóhoz. Az unió típusokat cső ("|") szimbólummal definiáljuk, megkülönböztetve őket két vagy több típus kombinációjaként. Például egy változó mind egy string, mind egy szám típust tarthat, ha azt deklaráljuk, mint let example: string | number.

Az unió típusok használata különösen előnyös olyan helyzetekben, ahol egy változó értéke nem korlátozódik egyetlen típusra sem. Biztosítják a típusbiztonságot azáltal, hogy csak a meghatározott típusokat lehet hozzárendelni a változóhoz. Az unió típusokat választjuk előnyben olyan esetekben, ahol a függvények vagy változók különböző adattípusokat kell, hogy kezeljenek. Ez az előnyös megközelítés megakadályozza azokat a hibákat, amelyek akkor fordulhatnak elő, ha a típusokat helytelenül rendeljük hozzá, ezzel biztosítva a TypeScript alkalmazások robosztusságát.

20. Hogyan deklarál és használ egy tömböt TypeScript-ben?

A tömb deklarálása és használata azt jelenti, hogy meg kell határozni a típusát azoknak az elemeknek, amelyeket a tömb fog tartalmazni TypeScript-ben. A típus után használjuk a szögletes zárójeleket a tömb deklarálásához. Például let numbers: number[] = [1, 2, 3]; deklarál egy számok tömbjét. Használhatjuk a generikus tömb típust is, például let numbers: Array<number> = [1, 2, 3];. Ez a megközelítés hasznos komplex típusok tömbjeinek meghatározására.

Az elemek indexével való hozzáférés az elemekhez és a tömb manipulálása a push, pop, slice stb. módszerekkel a tömb használatához TypeScript-ben, és az elemeken való iterálás a ciklusok vagy a forEach és map tömbmódszerek használatával. A tömb típusa TypeScript-ben biztosítja a típusbiztonságot, ami azt jelenti, hogy nem adhat hozzá más típusú elemeket a tömbhöz. A TypeScript fordítási időben hibát dob, ha megpróbálunk egy szöveget hozzáadni egy szám tömbhöz, ezzel biztosítva a tömb integritását. Ne felejtsük el konstansként deklarálni a tömböt, ha nem akarjuk újra hozzárendelni egy másik tömbhöz.

21. Mi az a tuple TypeScript-ben és mi a különbség egy tömbtől?

A tuple egy típusa a tömbnek TypeScript-ben, ahol az elemek száma és mindegyik elem típusa ismert és meghatározott. Míg egy általános tömb általában egyetlen típusú elemeket tartalmaz, a tuple lehetővé teszi a változó típusú elemek rögzített sorozatát. Például egy tuple-t arra határozzuk meg, hogy egy stringet, egy számot és egy logikai értéket tartalmazzon, abban a konkrét sorrendben. Ez a pontos meghatározás a típus és az elemek sorrendje a kulcskülönbség a tuple és a tömb között.

A tuple különösen hasznos, amikor egy függvénynek több értéket kell visszaadnia különböző típusokban. Szigorú struktúrát és sorrendet ír elő, biztosítva, hogy a tuple minden eleme egy adott pozíciót foglaljon el egy meghatározott típussal. Ez ellentétben áll az általános tömbökkel, ahol az elemek általában ugyanabban a típusban vannak, és dinamikusan hozzáadódnak vagy eltávolítódnak. A tuple így lehetővé teszi egy rögzített heterogén típusú elemek csoportosítását és továbbítását, javítva ezzel a kód olvashatóságát és típusbiztonságát TypeScript alkalmazásokban.

22. EL tudná magyarázni az 'any' típust TypeScript-ben?

Az 'any' típus TypeScript-ben lehetővé teszi, hogy a változók bármilyen típusú értéket tartsanak. Ez a típus a leginkább rugalmas TypeScript-ben, mivel engedélyezi bármilyenféle érték, beleértve a számokat, sztringeket és objektumokat is, anélkül, hogy szigorú típusellenőrzést alkalmazna. A 'any' típust olyan helyzetekben használják, ahol ki akarnak lépni a típusellenőrzésből, általában dinamikus tartalommal való munka vagy olyan JavaScript könyvtárakkal való interakció során, amelyek nem típusbiztosak.

Az 'any' típus hasznos egy projekt átmeneti átalakításakor JavaScript-ről TypeScript-re. Ez lehetővé teszi a szigorú típusozás fokozatos bevezetését anélkül, hogy egyszerre az összes meglévő kódot újra kellene szerkeszteni. Az 'any' típus túlzott használata aláássa a TypeScript statikus típusozási rendszerének előnyeit. Sparingly kell használni, mivel lényegében kikerüli a fordító típusellenőrzését. Jobb az 'any' típust használni, mint helytelen feltételezéseket tenni annak típusáról, ha egy változó típusa bizonytalan.


23. Mi a különbség a generikusok és az unio típusok között typescriptben?

Az unió típusok és a generikus típusok két különböző eszköz a TypeScriptben. Míg az unió típusokat arra használjuk, hogy egy változó vagy paraméter többféle típusú lehetőségét megadjuk, addig a generikus típusokat általánosított típusok létrehozására használjuk, amelyek többféle típust vagy értéket tudnak kezelni.

unio pl

let value: string | number;
value = "hello"; // OK
value = 10; // OK
value = true; // Error: Type 'boolean' is not assignable to type 'string | number'.


generikus pl

function identity<T>(arg: T): T {
    return arg;
}

let output = identity<string>("hello"); // 'output' típusa 'string'

